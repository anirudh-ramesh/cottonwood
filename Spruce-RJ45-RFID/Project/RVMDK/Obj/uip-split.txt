; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\uip-split.o --depend=.\Obj\uip-split.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\uip-split.crf ..\..\Libraries\uIP-1.0\uip\uip-split.c]
                          THUMB

                          AREA ||i.uip_split_output||, CODE, READONLY, ALIGN=2

                  uip_split_output PROC
;;;48     void
;;;49     uip_split_output(void)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
;;;51       u16_t tcplen, len1, len2;
;;;52     
;;;53       /* We only try to split maximum sized TCP segments. */
;;;54       if(BUF->proto == UIP_PROTO_TCP &&
000002  483f              LDR      r0,|L1.256|
000004  7dc0              LDRB     r0,[r0,#0x17]
000006  2806              CMP      r0,#6
000008  d177              BNE      |L1.250|
;;;55          uip_len == UIP_BUFSIZE - UIP_LLH_LEN) {
00000a  483e              LDR      r0,|L1.260|
00000c  8800              LDRH     r0,[r0,#0]  ; uip_len
00000e  f5a06170          SUB      r1,r0,#0xf00
000012  39f2              SUBS     r1,r1,#0xf2
000014  d171              BNE      |L1.250|
;;;56     
;;;57         tcplen = uip_len - UIP_TCPIP_HLEN;
000016  483b              LDR      r0,|L1.260|
000018  8800              LDRH     r0,[r0,#0]  ; uip_len
00001a  3828              SUBS     r0,r0,#0x28
00001c  b284              UXTH     r4,r0
;;;58         /* Split the segment in two. If the original packet length was
;;;59            odd, we make the second packet one byte larger. */
;;;60         len1 = len2 = tcplen / 2;
00001e  4620              MOV      r0,r4
000020  eb0471d4          ADD      r1,r4,r4,LSR #31
000024  104d              ASRS     r5,r1,#1
000026  462e              MOV      r6,r5
;;;61         if(len1 + len2 < tcplen) {
000028  4635              MOV      r5,r6
00002a  0070              LSLS     r0,r6,#1
00002c  42a0              CMP      r0,r4
00002e  da01              BGE      |L1.52|
;;;62           ++len2;
000030  1c70              ADDS     r0,r6,#1
000032  b286              UXTH     r6,r0
                  |L1.52|
;;;63         }
;;;64     
;;;65         /* Create the first packet. This is done by altering the length
;;;66            field of the IP header and updating the checksums. */
;;;67         uip_len = len1 + UIP_TCPIP_HLEN;
000034  f1050028          ADD      r0,r5,#0x28
000038  4932              LDR      r1,|L1.260|
00003a  8008              STRH     r0,[r1,#0]
;;;68     #if UIP_CONF_IPV6
;;;69         /* For IPv6, the IP length field does not include the IPv6 IP header
;;;70            length. */
;;;71         BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
;;;72         BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
;;;73     #else /* UIP_CONF_IPV6 */
;;;74         BUF->len[0] = uip_len >> 8;
00003c  4608              MOV      r0,r1
00003e  8800              LDRH     r0,[r0,#0]  ; uip_len
000040  1201              ASRS     r1,r0,#8
000042  482f              LDR      r0,|L1.256|
000044  7401              STRB     r1,[r0,#0x10]
;;;75         BUF->len[1] = uip_len & 0xff;
000046  482f              LDR      r0,|L1.260|
000048  8800              LDRH     r0,[r0,#0]  ; uip_len
00004a  b2c1              UXTB     r1,r0
00004c  482c              LDR      r0,|L1.256|
00004e  7441              STRB     r1,[r0,#0x11]
;;;76     #endif /* UIP_CONF_IPV6 */
;;;77     
;;;78         /* Recalculate the TCP checksum. */
;;;79         BUF->tcpchksum = 0;
000050  2100              MOVS     r1,#0
000052  8641              STRH     r1,[r0,#0x32]
;;;80         BUF->tcpchksum = ~(uip_tcpchksum());
000054  f7fffffe          BL       uip_tcpchksum
000058  43c0              MVNS     r0,r0
00005a  b281              UXTH     r1,r0
00005c  4828              LDR      r0,|L1.256|
00005e  8641              STRH     r1,[r0,#0x32]
;;;81     
;;;82     #if !UIP_CONF_IPV6
;;;83         /* Recalculate the IP checksum. */
;;;84         BUF->ipchksum = 0;
000060  2100              MOVS     r1,#0
000062  8301              STRH     r1,[r0,#0x18]
;;;85         BUF->ipchksum = ~(uip_ipchksum());
000064  f7fffffe          BL       uip_ipchksum
000068  43c0              MVNS     r0,r0
00006a  b281              UXTH     r1,r0
00006c  4824              LDR      r0,|L1.256|
00006e  8301              STRH     r1,[r0,#0x18]
;;;86     #endif /* UIP_CONF_IPV6 */
;;;87     
;;;88         /* Transmit the first packet. */
;;;89         uip_fw_output(); /* fd */
000070  f7fffffe          BL       uip_fw_output
;;;90         //tcpip_output();
;;;91     
;;;92         /* Now, create the second packet. To do this, it is not enough to
;;;93            just alter the length field, but we must also update the TCP
;;;94            sequence number and point the uip_appdata to a new place in
;;;95            memory. This place is detemined by the length of the first
;;;96            packet (len1). */
;;;97         uip_len = len2 + UIP_TCPIP_HLEN;
000074  f1060028          ADD      r0,r6,#0x28
000078  4922              LDR      r1,|L1.260|
00007a  8008              STRH     r0,[r1,#0]
;;;98     #if UIP_CONF_IPV6
;;;99         /* For IPv6, the IP length field does not include the IPv6 IP header
;;;100           length. */
;;;101        BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
;;;102        BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
;;;103    #else /* UIP_CONF_IPV6 */
;;;104        BUF->len[0] = uip_len >> 8;
00007c  4608              MOV      r0,r1
00007e  8800              LDRH     r0,[r0,#0]  ; uip_len
000080  1201              ASRS     r1,r0,#8
000082  481f              LDR      r0,|L1.256|
000084  7401              STRB     r1,[r0,#0x10]
;;;105        BUF->len[1] = uip_len & 0xff;
000086  481f              LDR      r0,|L1.260|
000088  8800              LDRH     r0,[r0,#0]  ; uip_len
00008a  b2c1              UXTB     r1,r0
00008c  481c              LDR      r0,|L1.256|
00008e  7441              STRB     r1,[r0,#0x11]
;;;106    #endif /* UIP_CONF_IPV6 */
;;;107    
;;;108        /*    uip_appdata += len1;*/
;;;109        memcpy(uip_appdata, (u8_t *)uip_appdata + len1, len2);
000090  481d              LDR      r0,|L1.264|
000092  6800              LDR      r0,[r0,#0]  ; uip_appdata
000094  1941              ADDS     r1,r0,r5
000096  4632              MOV      r2,r6
000098  481b              LDR      r0,|L1.264|
00009a  6800              LDR      r0,[r0,#0]  ; uip_appdata
00009c  f7fffffe          BL       __aeabi_memcpy
;;;110    
;;;111        uip_add32(BUF->seqno, len1);
0000a0  4629              MOV      r1,r5
0000a2  4817              LDR      r0,|L1.256|
0000a4  3026              ADDS     r0,r0,#0x26
0000a6  f7fffffe          BL       uip_add32
;;;112        BUF->seqno[0] = uip_acc32[0];
0000aa  4818              LDR      r0,|L1.268|
0000ac  7801              LDRB     r1,[r0,#0]  ; uip_acc32
0000ae  4814              LDR      r0,|L1.256|
0000b0  f8801026          STRB     r1,[r0,#0x26]
;;;113        BUF->seqno[1] = uip_acc32[1];
0000b4  4815              LDR      r0,|L1.268|
0000b6  7841              LDRB     r1,[r0,#1]  ; uip_acc32
0000b8  4811              LDR      r0,|L1.256|
0000ba  f8801027          STRB     r1,[r0,#0x27]
;;;114        BUF->seqno[2] = uip_acc32[2];
0000be  4813              LDR      r0,|L1.268|
0000c0  7881              LDRB     r1,[r0,#2]  ; uip_acc32
0000c2  480f              LDR      r0,|L1.256|
0000c4  f8801028          STRB     r1,[r0,#0x28]
;;;115        BUF->seqno[3] = uip_acc32[3];
0000c8  4810              LDR      r0,|L1.268|
0000ca  78c1              LDRB     r1,[r0,#3]  ; uip_acc32
0000cc  480c              LDR      r0,|L1.256|
0000ce  f8801029          STRB     r1,[r0,#0x29]
;;;116    
;;;117        /* Recalculate the TCP checksum. */
;;;118        BUF->tcpchksum = 0;
0000d2  2100              MOVS     r1,#0
0000d4  8641              STRH     r1,[r0,#0x32]
;;;119        BUF->tcpchksum = ~(uip_tcpchksum());
0000d6  f7fffffe          BL       uip_tcpchksum
0000da  43c0              MVNS     r0,r0
0000dc  b281              UXTH     r1,r0
0000de  4808              LDR      r0,|L1.256|
0000e0  8641              STRH     r1,[r0,#0x32]
;;;120    
;;;121    #if !UIP_CONF_IPV6
;;;122        /* Recalculate the IP checksum. */
;;;123        BUF->ipchksum = 0;
0000e2  2100              MOVS     r1,#0
0000e4  8301              STRH     r1,[r0,#0x18]
;;;124        BUF->ipchksum = ~(uip_ipchksum());
0000e6  f7fffffe          BL       uip_ipchksum
0000ea  43c0              MVNS     r0,r0
0000ec  b281              UXTH     r1,r0
0000ee  4804              LDR      r0,|L1.256|
0000f0  8301              STRH     r1,[r0,#0x18]
;;;125    #endif /* UIP_CONF_IPV6 */
;;;126    
;;;127        /* Transmit the second packet. */
;;;128        uip_fw_output(); /* fd*/
0000f2  f7fffffe          BL       uip_fw_output
0000f6  e002              B        |L1.254|
0000f8  e7ff              B        |L1.250|
                  |L1.250|
;;;129        /* tcpip_output(); */
;;;130      } else {
;;;131        uip_fw_output();  /* fd */
0000fa  f7fffffe          BL       uip_fw_output
                  |L1.254|
;;;132        /* tcpip_output(); */
;;;133      }
;;;134    
;;;135    }
0000fe  bd70              POP      {r4-r6,pc}
;;;136    /*-----------------------------------------------------------------------------*/
                          ENDP

                  |L1.256|
                          DCD      uip_buf
                  |L1.260|
                          DCD      uip_len
                  |L1.264|
                          DCD      uip_appdata
                  |L1.268|
                          DCD      uip_acc32
