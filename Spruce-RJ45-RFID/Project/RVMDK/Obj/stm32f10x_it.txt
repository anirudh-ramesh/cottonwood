; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\stm32f10x_it.o --depend=.\Obj\stm32f10x_it.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\stm32f10x_it.crf ..\..\Source\src\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;107      */
;;;108    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;109    {
;;;110      /* Go to infinite loop when Bus Fault exception occurs */
;;;111      while (1)
000002  e7fe              B        |L1.2|
;;;112      {
;;;113      }
;;;114    }
;;;115    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;142      */
;;;143    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;144    {
;;;145    }
;;;146    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;81       */
;;;82     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L3.2|
;;;83     {
;;;84       /* Go to infinite loop when Hard Fault exception occurs */
;;;85       while (1)
000002  e7fe              B        |L3.2|
;;;86       {
;;;87       }
;;;88     }
;;;89     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;94       */
;;;95     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;96     {
;;;97       /* Go to infinite loop when Memory Manage exception occurs */
;;;98       while (1)
000002  e7fe              B        |L4.2|
;;;99       {
;;;100      }
;;;101    }
;;;102    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;72     
;;;73     void NMI_Handler(void)
000000  4770              BX       lr
;;;74     {
;;;75     }
;;;76     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;151      */
;;;152    void PendSV_Handler(void)
000000  4770              BX       lr
;;;153    {
;;;154    }
;;;155    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;133      */
;;;134    void SVC_Handler(void)
000000  4770              BX       lr
;;;135    {
;;;136    }
;;;137    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;161    extern void SysTick_ISR(void);
;;;162    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;163    {
;;;164    	SysTick_ISR();
000002  f7fffffe          BL       SysTick_ISR
;;;165    }
000006  bd10              POP      {r4,pc}
;;;166    
                          ENDP


                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;55     
;;;56       void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	uint8_t RecieveData;
;;;59     
;;;60     		if (USART_GetITStatus(USART2, USART_IT_RXNE) != 0)
000002  f2405125          MOV      r1,#0x525
000006  480d              LDR      r0,|L9.60|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b180              CBZ      r0,|L9.48|
;;;61     		{
;;;62     			USART_ClearITPendingBit(USART2, USART_IT_RXNE);//清除中断标志位
00000e  f2405125          MOV      r1,#0x525
000012  480a              LDR      r0,|L9.60|
000014  f7fffffe          BL       USART_ClearITPendingBit
;;;63     			//RecieveData = USART_ReceiveData(USART2); /* Read one byte from the receive data register */	
;;;64     			ReceiveNum[R_count++] = USART_ReceiveData(USART2); //接收USART2返回的数据
000018  4808              LDR      r0,|L9.60|
00001a  f7fffffe          BL       USART_ReceiveData
00001e  b2c1              UXTB     r1,r0
000020  4807              LDR      r0,|L9.64|
000022  7802              LDRB     r2,[r0,#0]  ; R_count
000024  7800              LDRB     r0,[r0,#0]  ; R_count
000026  1c40              ADDS     r0,r0,#1
000028  4b05              LDR      r3,|L9.64|
00002a  7018              STRB     r0,[r3,#0]
00002c  4805              LDR      r0,|L9.68|
00002e  5481              STRB     r1,[r0,r2]
                  |L9.48|
;;;65     		//	USART_SendData(USART1, RecieveData);
;;;66     		//	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}
;;;67     		}
;;;68     		F_count++;	 //记录收到的数据个数
000030  4805              LDR      r0,|L9.72|
000032  8800              LDRH     r0,[r0,#0]  ; F_count
000034  1c40              ADDS     r0,r0,#1
000036  4904              LDR      r1,|L9.72|
000038  8008              STRH     r0,[r1,#0]
;;;69     }
00003a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L9.60|
                          DCD      0x40004400
                  |L9.64|
                          DCD      R_count
                  |L9.68|
                          DCD      ReceiveNum
                  |L9.72|
                          DCD      F_count

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;120      */
;;;121    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L10.2|
;;;122    {
;;;123      /* Go to infinite loop when Usage Fault exception occurs */
;;;124      while (1)
000002  e7fe              B        |L10.2|
;;;125      {
;;;126      }
;;;127    }
;;;128    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ReceiveNum
                          %        2200

                          AREA ||.data||, DATA, ALIGN=1

                  R_count
000000  0000              DCB      0x00,0x00
                  F_count
000002  0000              DCW      0x0000
