; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\usart_printf.o --depend=.\Obj\usart_printf.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\usart_printf.crf ..\..\Source\src\usart_printf.c]
                          THUMB

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=1

                  PrintfLogo PROC
;;;24     */
;;;25     void PrintfLogo(char *strName)
000000  4770              BX       lr
;;;26     {
;;;27     	//printf("*************************************************************\n\r");
;;;28     	//printf("* Example Name : %s\r\n", strName);
;;;29     //	printf("* \n\r");
;;;30     	//printf("*************************************************************\n\r");
;;;31     }
;;;32     
                          ENDP


                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;44     */
;;;45     void USART_Configuration(void)
000000  b500              PUSH     {lr}
;;;46     {
000002  b087              SUB      sp,sp,#0x1c
;;;47     	GPIO_InitTypeDef GPIO_InitStructure;
;;;48     	USART_InitTypeDef USART_InitStructure;
;;;49     	NVIC_InitTypeDef NVIC_InitStructure;
;;;50     
;;;51     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;52     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;53     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000014  2101              MOVS     r1,#1
000016  0448              LSLS     r0,r1,#17
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;54     
;;;55     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00001c  f44f7000          MOV      r0,#0x200
000020  f8ad0018          STRH     r0,[sp,#0x18]
;;;56     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000024  2018              MOVS     r0,#0x18
000026  f88d001b          STRB     r0,[sp,#0x1b]
;;;57     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002a  2003              MOVS     r0,#3
00002c  f88d001a          STRB     r0,[sp,#0x1a]
;;;58     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000030  a906              ADD      r1,sp,#0x18
000032  4833              LDR      r0,|L2.256|
000034  f7fffffe          BL       GPIO_Init
;;;59     
;;;60     
;;;61     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000038  f44f6080          MOV      r0,#0x400
00003c  f8ad0018          STRH     r0,[sp,#0x18]
;;;62     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000040  2004              MOVS     r0,#4
000042  f88d001b          STRB     r0,[sp,#0x1b]
;;;63     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000046  a906              ADD      r1,sp,#0x18
000048  482d              LDR      r0,|L2.256|
00004a  f7fffffe          BL       GPIO_Init
;;;64     
;;;65     	/*PA3->USART2 RX GPIO_CONFIGURATION*/
;;;66     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00004e  2004              MOVS     r0,#4
000050  f88d001b          STRB     r0,[sp,#0x1b]
;;;67     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
000054  2008              MOVS     r0,#8
000056  f8ad0018          STRH     r0,[sp,#0x18]
;;;68     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00005a  a906              ADD      r1,sp,#0x18
00005c  4828              LDR      r0,|L2.256|
00005e  f7fffffe          BL       GPIO_Init
;;;69     
;;;70     	/*PA2->USART2 TX GPIO_CONFIGURATION*/
;;;71     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000062  2018              MOVS     r0,#0x18
000064  f88d001b          STRB     r0,[sp,#0x1b]
;;;72     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000068  2004              MOVS     r0,#4
00006a  f8ad0018          STRH     r0,[sp,#0x18]
;;;73     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00006e  2003              MOVS     r0,#3
000070  f88d001a          STRB     r0,[sp,#0x1a]
;;;74     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000074  a906              ADD      r1,sp,#0x18
000076  4822              LDR      r0,|L2.256|
000078  f7fffffe          BL       GPIO_Init
;;;75     	
;;;76     
;;;77     
;;;78     	USART_InitStructure.USART_BaudRate = 115200;
00007c  f44f30e1          MOV      r0,#0x1c200
000080  9002              STR      r0,[sp,#8]
;;;79     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000082  2000              MOVS     r0,#0
000084  f8ad000c          STRH     r0,[sp,#0xc]
;;;80     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000088  f8ad000e          STRH     r0,[sp,#0xe]
;;;81     	USART_InitStructure.USART_Parity = USART_Parity_No;
00008c  f8ad0010          STRH     r0,[sp,#0x10]
;;;82     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000090  f8ad0014          STRH     r0,[sp,#0x14]
;;;83     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000094  200c              MOVS     r0,#0xc
000096  f8ad0012          STRH     r0,[sp,#0x12]
;;;84     	USART_Init(USART1, &USART_InitStructure);
00009a  a902              ADD      r1,sp,#8
00009c  4819              LDR      r0,|L2.260|
00009e  f7fffffe          BL       USART_Init
;;;85     	USART_Init(USART2, &USART_InitStructure);
0000a2  a902              ADD      r1,sp,#8
0000a4  4818              LDR      r0,|L2.264|
0000a6  f7fffffe          BL       USART_Init
;;;86     
;;;87     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
0000aa  f44f60e0          MOV      r0,#0x700
0000ae  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;88     	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
0000b2  2026              MOVS     r0,#0x26
0000b4  f88d0004          STRB     r0,[sp,#4]
;;;89     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
0000b8  2001              MOVS     r0,#1
0000ba  f88d0005          STRB     r0,[sp,#5]
;;;90     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0000be  2000              MOVS     r0,#0
0000c0  f88d0006          STRB     r0,[sp,#6]
;;;91     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000c4  2001              MOVS     r0,#1
0000c6  f88d0007          STRB     r0,[sp,#7]
;;;92     	NVIC_Init(&NVIC_InitStructure);
0000ca  a801              ADD      r0,sp,#4
0000cc  f7fffffe          BL       NVIC_Init
;;;93     
;;;94     
;;;95     	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//ENABLE USART2 RECEIVE INTRRUPT
0000d0  2201              MOVS     r2,#1
0000d2  f2405125          MOV      r1,#0x525
0000d6  480c              LDR      r0,|L2.264|
0000d8  f7fffffe          BL       USART_ITConfig
;;;96     	
;;;97     	
;;;98     	USART_Cmd(USART1, ENABLE);
0000dc  2101              MOVS     r1,#1
0000de  4809              LDR      r0,|L2.260|
0000e0  f7fffffe          BL       USART_Cmd
;;;99     	USART_Cmd(USART2, ENABLE);//ENABLE USART2
0000e4  2101              MOVS     r1,#1
0000e6  4808              LDR      r0,|L2.264|
0000e8  f7fffffe          BL       USART_Cmd
;;;100    
;;;101    	USART_ClearFlag(USART1, USART_FLAG_TC);
0000ec  2140              MOVS     r1,#0x40
0000ee  4805              LDR      r0,|L2.260|
0000f0  f7fffffe          BL       USART_ClearFlag
;;;102    	USART_ClearFlag(USART2, USART_FLAG_TC);      
0000f4  2140              MOVS     r1,#0x40
0000f6  4804              LDR      r0,|L2.264|
0000f8  f7fffffe          BL       USART_ClearFlag
;;;103    }
0000fc  b007              ADD      sp,sp,#0x1c
0000fe  bd00              POP      {pc}
;;;104    
                          ENDP

                  |L2.256|
                          DCD      0x40010800
                  |L2.260|
                          DCD      0x40013800
                  |L2.264|
                          DCD      0x40004400

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;131    */
;;;132    int fgetc(FILE *f)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134    	/* 等待串口1输入数据 */
;;;135    	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
000004  bf00              NOP      
                  |L3.6|
000006  2120              MOVS     r1,#0x20
000008  4804              LDR      r0,|L3.28|
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L3.6|
;;;136    	{}
;;;137    
;;;138    	return (int)USART_ReceiveData(USART1);
000012  4802              LDR      r0,|L3.28|
000014  f7fffffe          BL       USART_ReceiveData
;;;139    }
000018  bd10              POP      {r4,pc}
;;;140    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40013800

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;111    */
;;;112    int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;113    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;114    	/* Place your implementation of fputc here */
;;;115    	/* e.g. write a character to the USART */
;;;116    	USART_SendData(USART1, (uint8_t) ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L4.32|
00000a  f7fffffe          BL       USART_SendData
;;;117    
;;;118    	/* Loop until the end of transmission */
;;;119    	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
00000e  bf00              NOP      
                  |L4.16|
000010  2140              MOVS     r1,#0x40
000012  4803              LDR      r0,|L4.32|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L4.16|
;;;120    	{}
;;;121    
;;;122    	return ch;
00001c  4620              MOV      r0,r4
;;;123    }
00001e  bd70              POP      {r4-r6,pc}
;;;124    
                          ENDP

                  |L4.32|
                          DCD      0x40013800
