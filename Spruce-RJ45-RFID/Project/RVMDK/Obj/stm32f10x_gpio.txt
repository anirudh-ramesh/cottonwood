; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\stm32f10x_gpio.o --depend=.\Obj\stm32f10x_gpio.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\stm32f10x_gpio.crf ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;157      */
;;;158    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162    }
000012  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;106      */
;;;107    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;108    {
000002  4604              MOV      r4,r0
;;;109      /* Check the parameters */
;;;110      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;111      
;;;112      if (GPIOx == GPIOA)
000004  4829              LDR      r0,|L2.172|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L2.28|
;;;113      {
;;;114        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e046              B        |L2.170|
                  |L2.28|
;;;116      }
;;;117      else if (GPIOx == GPIOB)
00001c  4824              LDR      r0,|L2.176|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L2.52|
;;;118      {
;;;119        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2008              MOVS     r0,#8
000026  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2008              MOVS     r0,#8
00002e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000032  e03a              B        |L2.170|
                  |L2.52|
;;;121      }
;;;122      else if (GPIOx == GPIOC)
000034  481f              LDR      r0,|L2.180|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L2.76|
;;;123      {
;;;124        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2010              MOVS     r0,#0x10
00003e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2010              MOVS     r0,#0x10
000046  f7fffffe          BL       RCC_APB2PeriphResetCmd
00004a  e02e              B        |L2.170|
                  |L2.76|
;;;126      }
;;;127      else if (GPIOx == GPIOD)
00004c  481a              LDR      r0,|L2.184|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L2.100|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2020              MOVS     r0,#0x20
000056  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2020              MOVS     r0,#0x20
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000062  e022              B        |L2.170|
                  |L2.100|
;;;131      }    
;;;132      else if (GPIOx == GPIOE)
000064  4815              LDR      r0,|L2.188|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L2.124|
;;;133      {
;;;134        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2040              MOVS     r0,#0x40
00006e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2040              MOVS     r0,#0x40
000076  f7fffffe          BL       RCC_APB2PeriphResetCmd
00007a  e016              B        |L2.170|
                  |L2.124|
;;;136      } 
;;;137      else if (GPIOx == GPIOF)
00007c  4810              LDR      r0,|L2.192|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L2.148|
;;;138      {
;;;139        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2080              MOVS     r0,#0x80
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2080              MOVS     r0,#0x80
00008e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000092  e00a              B        |L2.170|
                  |L2.148|
;;;141      }
;;;142      else
;;;143      {
;;;144        if (GPIOx == GPIOG)
000094  480b              LDR      r0,|L2.196|
000096  4284              CMP      r4,r0
000098  d107              BNE      |L2.170|
;;;145        {
;;;146          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  1580              ASRS     r0,r0,#22
00009e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  15a0              ASRS     r0,r4,#22
0000a6  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L2.170|
;;;148        }
;;;149      }
;;;150    }
0000aa  bd10              POP      {r4,pc}
;;;151    
                          ENDP

                  |L2.172|
                          DCD      0x40010800
                  |L2.176|
                          DCD      0x40010c00
                  |L2.180|
                          DCD      0x40011000
                  |L2.184|
                          DCD      0x40011400
                  |L2.188|
                          DCD      0x40011800
                  |L2.192|
                          DCD      0x40011c00
                  |L2.196|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;596      */
;;;597    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;598    { 
;;;599      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;600    
;;;601      /* Configure MII_RMII selection bit */ 
;;;602      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  6008              STR      r0,[r1,#0]
;;;603    }
000004  4770              BX       lr
;;;604      
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x422000dc

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;575      */
;;;576    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b530              PUSH     {r4,r5,lr}
;;;577    {
;;;578      uint32_t tmp = 0x00;
000002  2200              MOVS     r2,#0
;;;579      /* Check the parameters */
;;;580      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;581      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;582      
;;;583      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;584      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00000e  4b0a              LDR      r3,|L4.56|
000010  108c              ASRS     r4,r1,#2
000012  f8534024          LDR      r4,[r3,r4,LSL #2]
000016  4394              BICS     r4,r4,r2
000018  108d              ASRS     r5,r1,#2
00001a  f8434025          STR      r4,[r3,r5,LSL #2]
;;;585      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00001e  108c              ASRS     r4,r1,#2
000020  f8533024          LDR      r3,[r3,r4,LSL #2]
000024  078c              LSLS     r4,r1,#30
000026  0f24              LSRS     r4,r4,#28
000028  fa00f404          LSL      r4,r0,r4
00002c  4323              ORRS     r3,r3,r4
00002e  4c02              LDR      r4,|L4.56|
000030  108d              ASRS     r5,r1,#2
000032  f8443025          STR      r3,[r4,r5,LSL #2]
;;;586    }
000036  bd30              POP      {r4,r5,pc}
;;;587    
                          ENDP

                  |L4.56|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;481      */
;;;482    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;483    {
;;;484      /* Check the parameters */
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      
;;;487      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;488    }
000004  4770              BX       lr
;;;489    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;460      */
;;;461    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  2200              MOVS     r2,#0
;;;462    {
;;;463      uint32_t tmpreg = 0x00;
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;466      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;467        
;;;468      tmpreg = AFIO->EVCR;
000002  4b05              LDR      r3,|L6.24|
000004  681a              LDR      r2,[r3,#0]
;;;469      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;470      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000006  f64f7380          MOV      r3,#0xff80
00000a  401a              ANDS     r2,r2,r3
;;;471      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000c  ea421200          ORR      r2,r2,r0,LSL #4
;;;472      tmpreg |= GPIO_PinSource;
000010  430a              ORRS     r2,r2,r1
;;;473      AFIO->EVCR = tmpreg;
000012  4b01              LDR      r3,|L6.24|
000014  601a              STR      r2,[r3,#0]
;;;474    }
000016  4770              BX       lr
;;;475    
                          ENDP

                  |L6.24|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;171      */
;;;172    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;173    {
;;;174      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
;;;175      uint32_t tmpreg = 0x00, pinmask = 0x00;
00000a  2600              MOVS     r6,#0
00000c  2700              MOVS     r7,#0
;;;176      /* Check the parameters */
;;;177      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;178      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;179      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;180      
;;;181    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;182      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
00000e  f891c003          LDRB     r12,[r1,#3]
000012  f00c020f          AND      r2,r12,#0xf
;;;183      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
000016  f891c003          LDRB     r12,[r1,#3]
00001a  f01c0f10          TST      r12,#0x10
00001e  d003              BEQ      |L7.40|
;;;184      { 
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;187        /* Output mode */
;;;188        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
000020  f891c002          LDRB     r12,[r1,#2]
000024  ea4c0202          ORR      r2,r12,r2
                  |L7.40|
;;;189      }
;;;190    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;191      /* Configure the eight low port pins */
;;;192      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000028  f8b1c000          LDRH     r12,[r1,#0]
00002c  f01c0fff          TST      r12,#0xff
000030  d031              BEQ      |L7.150|
;;;193      {
;;;194        tmpreg = GPIOx->CRL;
000032  6806              LDR      r6,[r0,#0]
;;;195        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000034  2400              MOVS     r4,#0
000036  e02b              B        |L7.144|
                  |L7.56|
;;;196        {
;;;197          pos = ((uint32_t)0x01) << pinpos;
000038  f04f0c01          MOV      r12,#1
00003c  fa0cf504          LSL      r5,r12,r4
;;;198          /* Get the port pins position */
;;;199          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000040  f8b1c000          LDRH     r12,[r1,#0]
000044  ea0c0305          AND      r3,r12,r5
;;;200          if (currentpin == pos)
000048  42ab              CMP      r3,r5
00004a  d120              BNE      |L7.142|
;;;201          {
;;;202            pos = pinpos << 2;
00004c  00a5              LSLS     r5,r4,#2
;;;203            /* Clear the corresponding low control register bits */
;;;204            pinmask = ((uint32_t)0x0F) << pos;
00004e  f04f0c0f          MOV      r12,#0xf
000052  fa0cf705          LSL      r7,r12,r5
;;;205            tmpreg &= ~pinmask;
000056  43be              BICS     r6,r6,r7
;;;206            /* Write the mode configuration in the corresponding bits */
;;;207            tmpreg |= (currentmode << pos);
000058  fa02fc05          LSL      r12,r2,r5
00005c  ea4c0606          ORR      r6,r12,r6
;;;208            /* Reset the corresponding ODR bit */
;;;209            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000060  f891c003          LDRB     r12,[r1,#3]
000064  f1bc0f28          CMP      r12,#0x28
000068  d106              BNE      |L7.120|
;;;210            {
;;;211              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
00006a  f04f0c01          MOV      r12,#1
00006e  fa0cfc04          LSL      r12,r12,r4
000072  f8c0c014          STR      r12,[r0,#0x14]
000076  e00a              B        |L7.142|
                  |L7.120|
;;;212            }
;;;213            else
;;;214            {
;;;215              /* Set the corresponding ODR bit */
;;;216              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000078  f891c003          LDRB     r12,[r1,#3]
00007c  f1bc0f48          CMP      r12,#0x48
000080  d105              BNE      |L7.142|
;;;217              {
;;;218                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
000082  f04f0c01          MOV      r12,#1
000086  fa0cfc04          LSL      r12,r12,r4
00008a  f8c0c010          STR      r12,[r0,#0x10]
                  |L7.142|
00008e  1c64              ADDS     r4,r4,#1              ;195
                  |L7.144|
000090  2c08              CMP      r4,#8                 ;195
000092  d3d1              BCC      |L7.56|
;;;219              }
;;;220            }
;;;221          }
;;;222        }
;;;223        GPIOx->CRL = tmpreg;
000094  6006              STR      r6,[r0,#0]
                  |L7.150|
;;;224      }
;;;225    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;226      /* Configure the eight high port pins */
;;;227      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000096  f8b1c000          LDRH     r12,[r1,#0]
00009a  f1bc0fff          CMP      r12,#0xff
00009e  dd34              BLE      |L7.266|
;;;228      {
;;;229        tmpreg = GPIOx->CRH;
0000a0  6846              LDR      r6,[r0,#4]
;;;230        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000a2  2400              MOVS     r4,#0
0000a4  e02e              B        |L7.260|
                  |L7.166|
;;;231        {
;;;232          pos = (((uint32_t)0x01) << (pinpos + 0x08));
0000a6  f1040c08          ADD      r12,r4,#8
0000aa  f04f0e01          MOV      lr,#1
0000ae  fa0ef50c          LSL      r5,lr,r12
;;;233          /* Get the port pins position */
;;;234          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0000b2  f8b1c000          LDRH     r12,[r1,#0]
0000b6  ea0c0305          AND      r3,r12,r5
;;;235          if (currentpin == pos)
0000ba  42ab              CMP      r3,r5
0000bc  d121              BNE      |L7.258|
;;;236          {
;;;237            pos = pinpos << 2;
0000be  00a5              LSLS     r5,r4,#2
;;;238            /* Clear the corresponding high control register bits */
;;;239            pinmask = ((uint32_t)0x0F) << pos;
0000c0  f04f0c0f          MOV      r12,#0xf
0000c4  fa0cf705          LSL      r7,r12,r5
;;;240            tmpreg &= ~pinmask;
0000c8  43be              BICS     r6,r6,r7
;;;241            /* Write the mode configuration in the corresponding bits */
;;;242            tmpreg |= (currentmode << pos);
0000ca  fa02fc05          LSL      r12,r2,r5
0000ce  ea4c0606          ORR      r6,r12,r6
;;;243            /* Reset the corresponding ODR bit */
;;;244            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000d2  f891c003          LDRB     r12,[r1,#3]
0000d6  f1bc0f28          CMP      r12,#0x28
0000da  d105              BNE      |L7.232|
;;;245            {
;;;246              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000dc  f1040c08          ADD      r12,r4,#8
0000e0  fa0efe0c          LSL      lr,lr,r12
0000e4  f8c0e014          STR      lr,[r0,#0x14]
                  |L7.232|
;;;247            }
;;;248            /* Set the corresponding ODR bit */
;;;249            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000e8  f891c003          LDRB     r12,[r1,#3]
0000ec  f1bc0f48          CMP      r12,#0x48
0000f0  d107              BNE      |L7.258|
;;;250            {
;;;251              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000f2  f1040c08          ADD      r12,r4,#8
0000f6  f04f0e01          MOV      lr,#1
0000fa  fa0efe0c          LSL      lr,lr,r12
0000fe  f8c0e010          STR      lr,[r0,#0x10]
                  |L7.258|
000102  1c64              ADDS     r4,r4,#1              ;230
                  |L7.260|
000104  2c08              CMP      r4,#8                 ;230
000106  d3ce              BCC      |L7.166|
;;;252            }
;;;253          }
;;;254        }
;;;255        GPIOx->CRH = tmpreg;
000108  6046              STR      r6,[r0,#4]
                  |L7.266|
;;;256      }
;;;257    }
00010a  bdf0              POP      {r4-r7,pc}
;;;258    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;430      */
;;;431    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f44f3280          MOV      r2,#0x10000
;;;432    {
;;;433      uint32_t tmp = 0x00010000;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438      
;;;439      tmp |= GPIO_Pin;
000004  430a              ORRS     r2,r2,r1
;;;440      /* Set LCKK bit */
;;;441      GPIOx->LCKR = tmp;
000006  6182              STR      r2,[r0,#0x18]
;;;442      /* Reset LCKK bit */
;;;443      GPIOx->LCKR =  GPIO_Pin;
000008  6181              STR      r1,[r0,#0x18]
;;;444      /* Set LCKK bit */
;;;445      GPIOx->LCKR = tmp;
00000a  6182              STR      r2,[r0,#0x18]
;;;446      /* Read LCKK bit*/
;;;447      tmp = GPIOx->LCKR;
00000c  6982              LDR      r2,[r0,#0x18]
;;;448      /* Read LCKK bit*/
;;;449      tmp = GPIOx->LCKR;
00000e  6982              LDR      r2,[r0,#0x18]
;;;450    }
000010  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;529      */
;;;530    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;531    {
;;;532      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
000006  2500              MOVS     r5,#0
000008  2400              MOVS     r4,#0
;;;533    
;;;534      /* Check the parameters */
;;;535      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;536      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;537      
;;;538      tmpreg = AFIO->MAPR;
00000a  4e17              LDR      r6,|L9.104|
00000c  6875              LDR      r5,[r6,#4]
;;;539    
;;;540      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
00000e  f3c04403          UBFX     r4,r0,#16,#4
;;;541      tmp = GPIO_Remap & LSB_MASK;
000012  b282              UXTH     r2,r0
;;;542    
;;;543      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000014  f4001640          AND      r6,r0,#0x300000
000018  f5b61f40          CMP      r6,#0x300000
00001c  d108              BNE      |L9.48|
;;;544      {
;;;545        tmpreg &= DBGAFR_SWJCFG_MASK;
00001e  f0256570          BIC      r5,r5,#0xf000000
;;;546        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
000022  4e11              LDR      r6,|L9.104|
000024  6876              LDR      r6,[r6,#4]
000026  f0266670          BIC      r6,r6,#0xf000000
00002a  4f0f              LDR      r7,|L9.104|
00002c  607e              STR      r6,[r7,#4]
00002e  e012              B        |L9.86|
                  |L9.48|
;;;547      }
;;;548      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000030  f4001680          AND      r6,r0,#0x100000
000034  f5b61f80          CMP      r6,#0x100000
000038  d106              BNE      |L9.72|
;;;549      {
;;;550        tmp1 = ((uint32_t)0x03) << tmpmask;
00003a  2603              MOVS     r6,#3
00003c  fa06f304          LSL      r3,r6,r4
;;;551        tmpreg &= ~tmp1;
000040  439d              BICS     r5,r5,r3
;;;552        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000042  f0456570          ORR      r5,r5,#0xf000000
000046  e006              B        |L9.86|
                  |L9.72|
;;;553      }
;;;554      else
;;;555      {
;;;556        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000048  0d46              LSRS     r6,r0,#21
00004a  0136              LSLS     r6,r6,#4
00004c  fa02f606          LSL      r6,r2,r6
000050  43b5              BICS     r5,r5,r6
;;;557        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000052  f0456570          ORR      r5,r5,#0xf000000
                  |L9.86|
;;;558      }
;;;559    
;;;560      if (NewState != DISABLE)
000056  b121              CBZ      r1,|L9.98|
;;;561      {
;;;562        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000058  0d46              LSRS     r6,r0,#21
00005a  0136              LSLS     r6,r6,#4
00005c  fa02f606          LSL      r6,r2,r6
000060  4335              ORRS     r5,r5,r6
                  |L9.98|
;;;563      }
;;;564    
;;;565      AFIO->MAPR = tmpreg;
000062  4e01              LDR      r6,|L9.104|
000064  6075              STR      r5,[r6,#4]
;;;566    }
000066  bdf0              POP      {r4-r7,pc}
;;;567    
                          ENDP

                  |L9.104|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;303      */
;;;304    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;305    {
;;;306      /* Check the parameters */
;;;307      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;308      
;;;309      return ((uint16_t)GPIOx->IDR);
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;310    }
000006  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;279      */
;;;280    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;281    {
;;;282      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;283      
;;;284      /* Check the parameters */
;;;285      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;286      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;287      
;;;288      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6893              LDR      r3,[r2,#8]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L11.14|
;;;289      {
;;;290        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L11.16|
                  |L11.14|
;;;291      }
;;;292      else
;;;293      {
;;;294        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L11.16|
;;;295      }
;;;296      return bitstatus;
;;;297    }
000010  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;341      */
;;;342    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;346        
;;;347      return ((uint16_t)GPIOx->ODR);
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;348    }
000006  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;318      */
;;;319    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;320    {
;;;321      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;322      /* Check the parameters */
;;;323      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;324      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;325      
;;;326      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d3              LDR      r3,[r2,#0xc]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L13.14|
;;;327      {
;;;328        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L13.16|
                  |L13.14|
;;;329      }
;;;330      else
;;;331      {
;;;332        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L13.16|
;;;333      }
;;;334      return bitstatus;
;;;335    }
000010  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;372      */
;;;373    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;374    {
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;377      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;378      
;;;379      GPIOx->BRR = GPIO_Pin;
;;;380    }
000002  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;356      */
;;;357    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;358    {
;;;359      /* Check the parameters */
;;;360      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;361      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;362      
;;;363      GPIOx->BSRR = GPIO_Pin;
;;;364    }
000002  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;264      */
;;;265    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;266    {
;;;267      /* Reset GPIO init structure parameters values */
;;;268      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;269      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;270      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;271    }
00000e  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;415      */
;;;416    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;417    {
;;;418      /* Check the parameters */
;;;419      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;420      
;;;421      GPIOx->ODR = PortVal;
;;;422    }
000002  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;392      */
;;;393    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L18.6|
;;;394    {
;;;395      /* Check the parameters */
;;;396      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;397      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;398      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;399      
;;;400      if (BitVal != Bit_RESET)
;;;401      {
;;;402        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L18.8|
                  |L18.6|
;;;403      }
;;;404      else
;;;405      {
;;;406        GPIOx->BRR = GPIO_Pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L18.8|
;;;407      }
;;;408    }
000008  4770              BX       lr
;;;409    
                          ENDP

