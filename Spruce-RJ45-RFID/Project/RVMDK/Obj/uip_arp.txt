; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\uip_arp.o --depend=.\Obj\uip_arp.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\uip_arp.crf ..\..\Libraries\uIP-1.0\uip\uip_arp.c]
                          THUMB

                          AREA ||i.uip_arp_arpin||, CODE, READONLY, ALIGN=2

                  uip_arp_arpin PROC
;;;277    void
;;;278    uip_arp_arpin(void)
000000  b510              PUSH     {r4,lr}
;;;279    {
;;;280    
;;;281      if(uip_len < sizeof(struct arp_hdr)) {
000002  4836              LDR      r0,|L1.220|
000004  8800              LDRH     r0,[r0,#0]  ; uip_len
000006  282a              CMP      r0,#0x2a
000008  d203              BCS      |L1.18|
;;;282        uip_len = 0;
00000a  2000              MOVS     r0,#0
00000c  4933              LDR      r1,|L1.220|
00000e  8008              STRH     r0,[r1,#0]
                  |L1.16|
;;;283        return;
;;;284      }
;;;285      uip_len = 0;
;;;286    
;;;287      switch(BUF->opcode) {
;;;288      case HTONS(ARP_REQUEST):
;;;289        /* ARP request. If it asked for our address, we send out a
;;;290           reply. */
;;;291        if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
;;;292    
;;;293          /* First, we register the one who made the request in our ARP
;;;294    	 table, since it is likely that we will do more communication
;;;295    	 with this host in the future. */
;;;296          uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
;;;297    
;;;298          /* The reply opcode is 2. */
;;;299          BUF->opcode = HTONS(2);
;;;300    
;;;301          memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
;;;302          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
;;;303          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
;;;304          memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
;;;305    
;;;306          BUF->dipaddr[0] = BUF->sipaddr[0];
;;;307          BUF->dipaddr[1] = BUF->sipaddr[1];
;;;308          BUF->sipaddr[0] = uip_hostaddr[0];
;;;309          BUF->sipaddr[1] = uip_hostaddr[1];
;;;310    
;;;311          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
;;;312          uip_len = sizeof(struct arp_hdr);
;;;313        }
;;;314        break;
;;;315      case HTONS(ARP_REPLY):
;;;316        /* ARP reply. We insert or update the ARP table if it was meant
;;;317           for us. */
;;;318        if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
;;;319          uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
;;;320        }
;;;321        break;
;;;322      }
;;;323    
;;;324      return;
;;;325    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;285
000014  4931              LDR      r1,|L1.220|
000016  8008              STRH     r0,[r1,#0]            ;285
000018  4831              LDR      r0,|L1.224|
00001a  8a80              LDRH     r0,[r0,#0x14]         ;287  ; uip_buf
00001c  f5b07f80          CMP      r0,#0x100             ;287
000020  d003              BEQ      |L1.42|
000022  f5b07f00          CMP      r0,#0x200             ;287
000026  d156              BNE      |L1.214|
000028  e043              B        |L1.178|
                  |L1.42|
00002a  482d              LDR      r0,|L1.224|
00002c  8cc0              LDRH     r0,[r0,#0x26]         ;291  ; uip_buf
00002e  492d              LDR      r1,|L1.228|
000030  8809              LDRH     r1,[r1,#0]            ;291  ; uip_hostaddr
000032  4288              CMP      r0,r1                 ;291
000034  d13c              BNE      |L1.176|
000036  482a              LDR      r0,|L1.224|
000038  8d00              LDRH     r0,[r0,#0x28]         ;291
00003a  492a              LDR      r1,|L1.228|
00003c  8849              LDRH     r1,[r1,#2]            ;291  ; uip_hostaddr
00003e  4288              CMP      r0,r1                 ;291
000040  d136              BNE      |L1.176|
000042  4927              LDR      r1,|L1.224|
000044  3116              ADDS     r1,r1,#0x16           ;296
000046  1d88              ADDS     r0,r1,#6              ;296
000048  f7fffffe          BL       uip_arp_update
00004c  f44f7000          MOV      r0,#0x200             ;299
000050  4923              LDR      r1,|L1.224|
000052  8288              STRH     r0,[r1,#0x14]         ;299
000054  2206              MOVS     r2,#6                 ;301
000056  3116              ADDS     r1,r1,#0x16           ;301
000058  f101000a          ADD      r0,r1,#0xa            ;301
00005c  f7fffffe          BL       __aeabi_memcpy
000060  2206              MOVS     r2,#6                 ;302
000062  4921              LDR      r1,|L1.232|
000064  481e              LDR      r0,|L1.224|
000066  3016              ADDS     r0,r0,#0x16           ;302
000068  f7fffffe          BL       __aeabi_memcpy
00006c  2206              MOVS     r2,#6                 ;303
00006e  491e              LDR      r1,|L1.232|
000070  481b              LDR      r0,|L1.224|
000072  1d80              ADDS     r0,r0,#6              ;303
000074  f7fffffe          BL       __aeabi_memcpy
000078  2206              MOVS     r2,#6                 ;304
00007a  4919              LDR      r1,|L1.224|
00007c  3120              ADDS     r1,r1,#0x20           ;304
00007e  4818              LDR      r0,|L1.224|
000080  f7fffffe          BL       __aeabi_memcpy
000084  4816              LDR      r0,|L1.224|
000086  8b80              LDRH     r0,[r0,#0x1c]         ;306  ; uip_buf
000088  4915              LDR      r1,|L1.224|
00008a  84c8              STRH     r0,[r1,#0x26]         ;306
00008c  4608              MOV      r0,r1                 ;307
00008e  8bc1              LDRH     r1,[r0,#0x1e]         ;307
000090  8501              STRH     r1,[r0,#0x28]         ;307
000092  4814              LDR      r0,|L1.228|
000094  8800              LDRH     r0,[r0,#0]            ;308  ; uip_hostaddr
000096  4912              LDR      r1,|L1.224|
000098  8388              STRH     r0,[r1,#0x1c]         ;308
00009a  4812              LDR      r0,|L1.228|
00009c  8841              LDRH     r1,[r0,#2]            ;309  ; uip_hostaddr
00009e  4810              LDR      r0,|L1.224|
0000a0  83c1              STRH     r1,[r0,#0x1e]         ;309
0000a2  f44f60c1          MOV      r0,#0x608             ;311
0000a6  490e              LDR      r1,|L1.224|
0000a8  8188              STRH     r0,[r1,#0xc]          ;311
0000aa  202a              MOVS     r0,#0x2a              ;312
0000ac  490b              LDR      r1,|L1.220|
0000ae  8008              STRH     r0,[r1,#0]            ;312
                  |L1.176|
0000b0  e011              B        |L1.214|
                  |L1.178|
0000b2  480b              LDR      r0,|L1.224|
0000b4  8cc0              LDRH     r0,[r0,#0x26]         ;318  ; uip_buf
0000b6  490b              LDR      r1,|L1.228|
0000b8  8809              LDRH     r1,[r1,#0]            ;318  ; uip_hostaddr
0000ba  4288              CMP      r0,r1                 ;318
0000bc  d10a              BNE      |L1.212|
0000be  4808              LDR      r0,|L1.224|
0000c0  8d00              LDRH     r0,[r0,#0x28]         ;318
0000c2  4908              LDR      r1,|L1.228|
0000c4  8849              LDRH     r1,[r1,#2]            ;318  ; uip_hostaddr
0000c6  4288              CMP      r0,r1                 ;318
0000c8  d104              BNE      |L1.212|
0000ca  4905              LDR      r1,|L1.224|
0000cc  3116              ADDS     r1,r1,#0x16           ;319
0000ce  1d88              ADDS     r0,r1,#6              ;319
0000d0  f7fffffe          BL       uip_arp_update
                  |L1.212|
0000d4  bf00              NOP                            ;321
                  |L1.214|
0000d6  bf00              NOP                            ;314
0000d8  e79a              B        |L1.16|
;;;326    /*-----------------------------------------------------------------------------------*/
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      uip_len
                  |L1.224|
                          DCD      uip_buf
                  |L1.228|
                          DCD      uip_hostaddr
                  |L1.232|
                          DCD      uip_ethaddr

                          AREA ||i.uip_arp_init||, CODE, READONLY, ALIGN=2

                  uip_arp_init PROC
;;;124    void
;;;125    uip_arp_init(void)
000000  2000              MOVS     r0,#0
;;;126    {
;;;127      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000002  490b              LDR      r1,|L2.48|
000004  7008              STRB     r0,[r1,#0]
000006  e00e              B        |L2.38|
                  |L2.8|
;;;128        memset(arp_table[i].ipaddr, 0, 4);
000008  4809              LDR      r0,|L2.48|
00000a  7800              LDRB     r0,[r0,#0]  ; i
00000c  eb000040          ADD      r0,r0,r0,LSL #1
000010  4908              LDR      r1,|L2.52|
000012  eb010080          ADD      r0,r1,r0,LSL #2
000016  2100              MOVS     r1,#0
000018  8001              STRH     r1,[r0,#0]
00001a  8041              STRH     r1,[r0,#2]
00001c  4804              LDR      r0,|L2.48|
00001e  7800              LDRB     r0,[r0,#0]            ;127  ; i
000020  1c40              ADDS     r0,r0,#1              ;127
000022  4903              LDR      r1,|L2.48|
000024  7008              STRB     r0,[r1,#0]            ;127
                  |L2.38|
000026  4802              LDR      r0,|L2.48|
000028  7800              LDRB     r0,[r0,#0]            ;127  ; i
00002a  2808              CMP      r0,#8                 ;127
00002c  dbec              BLT      |L2.8|
;;;129      }
;;;130    }
00002e  4770              BX       lr
;;;131    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L2.48|
                          DCD      ||.data||+0x4
                  |L2.52|
                          DCD      ||.bss||

                          AREA ||i.uip_arp_out||, CODE, READONLY, ALIGN=2

                  uip_arp_out PROC
;;;354    void
;;;355    uip_arp_out(void)
000000  b510              PUSH     {r4,lr}
;;;356    {
;;;357      struct arp_entry *tabptr;
;;;358    
;;;359      /* Find the destination IP address in the ARP table and construct
;;;360         the Ethernet header. If the destination IP addres isn't on the
;;;361         local network, we use the default router's IP address instead.
;;;362    
;;;363         If not ARP table entry is found, we overwrite the original IP
;;;364         packet with an ARP request for the IP address. */
;;;365    
;;;366      /* First check if destination is a local broadcast. */
;;;367      if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
000002  485d              LDR      r0,|L3.376|
000004  8bc0              LDRH     r0,[r0,#0x1e]  ; uip_buf
000006  495d              LDR      r1,|L3.380|
000008  8809              LDRH     r1,[r1,#0]  ; broadcast_ipaddr
00000a  4288              CMP      r0,r1
00000c  d10c              BNE      |L3.40|
00000e  485a              LDR      r0,|L3.376|
000010  8c00              LDRH     r0,[r0,#0x20]
000012  495a              LDR      r1,|L3.380|
000014  8849              LDRH     r1,[r1,#2]  ; broadcast_ipaddr
000016  4288              CMP      r0,r1
000018  d106              BNE      |L3.40|
;;;368        memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
00001a  2206              MOVS     r2,#6
00001c  4957              LDR      r1,|L3.380|
00001e  1f89              SUBS     r1,r1,#6
000020  4855              LDR      r0,|L3.376|
000022  f7fffffe          BL       __aeabi_memcpy
000026  e098              B        |L3.346|
                  |L3.40|
;;;369      } else {
;;;370        /* Check if the destination address is on the local network. */
;;;371        if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
000028  4853              LDR      r0,|L3.376|
00002a  8bc1              LDRH     r1,[r0,#0x1e]  ; uip_buf
00002c  4854              LDR      r0,|L3.384|
00002e  8800              LDRH     r0,[r0,#0]  ; uip_netmask
000030  4001              ANDS     r1,r1,r0
000032  4854              LDR      r0,|L3.388|
000034  8800              LDRH     r0,[r0,#0]  ; uip_hostaddr
000036  4a52              LDR      r2,|L3.384|
000038  8812              LDRH     r2,[r2,#0]  ; uip_netmask
00003a  4010              ANDS     r0,r0,r2
00003c  4281              CMP      r1,r0
00003e  d10b              BNE      |L3.88|
000040  484d              LDR      r0,|L3.376|
000042  8c01              LDRH     r1,[r0,#0x20]
000044  484e              LDR      r0,|L3.384|
000046  8840              LDRH     r0,[r0,#2]  ; uip_netmask
000048  4001              ANDS     r1,r1,r0
00004a  484e              LDR      r0,|L3.388|
00004c  8840              LDRH     r0,[r0,#2]  ; uip_hostaddr
00004e  4a4c              LDR      r2,|L3.384|
000050  8852              LDRH     r2,[r2,#2]  ; uip_netmask
000052  4010              ANDS     r0,r0,r2
000054  4281              CMP      r1,r0
000056  d008              BEQ      |L3.106|
                  |L3.88|
;;;372          /* Destination address was not on the local network, so we need to
;;;373    	 use the default router's IP address instead of the destination
;;;374    	 address when determining the MAC address. */
;;;375          uip_ipaddr_copy(ipaddr, uip_draddr);
000058  bf00              NOP      
00005a  484b              LDR      r0,|L3.392|
00005c  8800              LDRH     r0,[r0,#0]  ; uip_draddr
00005e  494b              LDR      r1,|L3.396|
000060  8008              STRH     r0,[r1,#0]
000062  4849              LDR      r0,|L3.392|
000064  8840              LDRH     r0,[r0,#2]  ; uip_draddr
000066  8048              STRH     r0,[r1,#2]
000068  e008              B        |L3.124|
                  |L3.106|
;;;376        } else {
;;;377          /* Else, we use the destination IP address. */
;;;378          uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
00006a  bf00              NOP      
00006c  4842              LDR      r0,|L3.376|
00006e  8bc0              LDRH     r0,[r0,#0x1e]  ; uip_buf
000070  4946              LDR      r1,|L3.396|
000072  8008              STRH     r0,[r1,#0]
000074  4840              LDR      r0,|L3.376|
000076  8c00              LDRH     r0,[r0,#0x20]
000078  8048              STRH     r0,[r1,#2]
00007a  bf00              NOP      
                  |L3.124|
;;;379        }
;;;380    
;;;381        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
00007c  2000              MOVS     r0,#0
00007e  4943              LDR      r1,|L3.396|
000080  1d09              ADDS     r1,r1,#4
000082  7008              STRB     r0,[r1,#0]
000084  e019              B        |L3.186|
                  |L3.134|
;;;382          tabptr = &arp_table[i];
000086  4841              LDR      r0,|L3.396|
000088  1d00              ADDS     r0,r0,#4
00008a  7800              LDRB     r0,[r0,#0]  ; i
00008c  eb000040          ADD      r0,r0,r0,LSL #1
000090  493f              LDR      r1,|L3.400|
000092  eb010480          ADD      r4,r1,r0,LSL #2
;;;383          if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
000096  483d              LDR      r0,|L3.396|
000098  8800              LDRH     r0,[r0,#0]  ; ipaddr
00009a  8821              LDRH     r1,[r4,#0]
00009c  4288              CMP      r0,r1
00009e  d105              BNE      |L3.172|
0000a0  483a              LDR      r0,|L3.396|
0000a2  8840              LDRH     r0,[r0,#2]  ; ipaddr
0000a4  8861              LDRH     r1,[r4,#2]
0000a6  4288              CMP      r0,r1
0000a8  d100              BNE      |L3.172|
;;;384    	break;
0000aa  e00b              B        |L3.196|
                  |L3.172|
0000ac  4837              LDR      r0,|L3.396|
0000ae  1d00              ADDS     r0,r0,#4              ;381
0000b0  7800              LDRB     r0,[r0,#0]            ;381  ; i
0000b2  1c40              ADDS     r0,r0,#1              ;381
0000b4  4935              LDR      r1,|L3.396|
0000b6  1d09              ADDS     r1,r1,#4              ;381
0000b8  7008              STRB     r0,[r1,#0]            ;381
                  |L3.186|
0000ba  4834              LDR      r0,|L3.396|
0000bc  1d00              ADDS     r0,r0,#4              ;381
0000be  7800              LDRB     r0,[r0,#0]            ;381  ; i
0000c0  2808              CMP      r0,#8                 ;381
0000c2  dbe0              BLT      |L3.134|
                  |L3.196|
0000c4  bf00              NOP      
;;;385          }
;;;386        }
;;;387    
;;;388        if(i == UIP_ARPTAB_SIZE) {
0000c6  4831              LDR      r0,|L3.396|
0000c8  1d00              ADDS     r0,r0,#4
0000ca  7800              LDRB     r0,[r0,#0]  ; i
0000cc  2808              CMP      r0,#8
0000ce  d13f              BNE      |L3.336|
;;;389          /* The destination address was not in our ARP table, so we
;;;390    	 overwrite the IP packet with an ARP request. */
;;;391    
;;;392          memset(BUF->ethhdr.dest.addr, 0xff, 6);
0000d0  22ff              MOVS     r2,#0xff
0000d2  2106              MOVS     r1,#6
0000d4  4828              LDR      r0,|L3.376|
0000d6  f7fffffe          BL       __aeabi_memset
;;;393          memset(BUF->dhwaddr.addr, 0x00, 6);
0000da  2106              MOVS     r1,#6
0000dc  4826              LDR      r0,|L3.376|
0000de  3020              ADDS     r0,r0,#0x20
0000e0  f7fffffe          BL       __aeabi_memclr
;;;394          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
0000e4  2206              MOVS     r2,#6
0000e6  492b              LDR      r1,|L3.404|
0000e8  4823              LDR      r0,|L3.376|
0000ea  1d80              ADDS     r0,r0,#6
0000ec  f7fffffe          BL       __aeabi_memcpy
;;;395          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
0000f0  2206              MOVS     r2,#6
0000f2  4928              LDR      r1,|L3.404|
0000f4  4820              LDR      r0,|L3.376|
0000f6  3016              ADDS     r0,r0,#0x16
0000f8  f7fffffe          BL       __aeabi_memcpy
;;;396    
;;;397          uip_ipaddr_copy(BUF->dipaddr, ipaddr);
0000fc  bf00              NOP      
0000fe  4823              LDR      r0,|L3.396|
000100  8800              LDRH     r0,[r0,#0]  ; ipaddr
000102  491d              LDR      r1,|L3.376|
000104  84c8              STRH     r0,[r1,#0x26]
000106  4821              LDR      r0,|L3.396|
000108  8841              LDRH     r1,[r0,#2]  ; ipaddr
00010a  481b              LDR      r0,|L3.376|
00010c  8501              STRH     r1,[r0,#0x28]
00010e  bf00              NOP      
;;;398          uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
000110  bf00              NOP      
000112  481c              LDR      r0,|L3.388|
000114  8800              LDRH     r0,[r0,#0]  ; uip_hostaddr
000116  4918              LDR      r1,|L3.376|
000118  8388              STRH     r0,[r1,#0x1c]
00011a  481a              LDR      r0,|L3.388|
00011c  8841              LDRH     r1,[r0,#2]  ; uip_hostaddr
00011e  4816              LDR      r0,|L3.376|
000120  83c1              STRH     r1,[r0,#0x1e]
000122  bf00              NOP      
;;;399          BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
000124  f44f7080          MOV      r0,#0x100
000128  4913              LDR      r1,|L3.376|
00012a  8288              STRH     r0,[r1,#0x14]
;;;400          BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
00012c  81c8              STRH     r0,[r1,#0xe]
;;;401          BUF->protocol = HTONS(UIP_ETHTYPE_IP);
00012e  2008              MOVS     r0,#8
000130  8208              STRH     r0,[r1,#0x10]
;;;402          BUF->hwlen = 6;
000132  2006              MOVS     r0,#6
000134  7488              STRB     r0,[r1,#0x12]
;;;403          BUF->protolen = 4;
000136  2004              MOVS     r0,#4
000138  74c8              STRB     r0,[r1,#0x13]
;;;404          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
00013a  f44f60c1          MOV      r0,#0x608
00013e  8188              STRH     r0,[r1,#0xc]
;;;405    
;;;406          uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
000140  f1010036          ADD      r0,r1,#0x36
000144  4914              LDR      r1,|L3.408|
000146  6008              STR      r0,[r1,#0]  ; uip_appdata
;;;407    
;;;408          uip_len = sizeof(struct arp_hdr);
000148  202a              MOVS     r0,#0x2a
00014a  4914              LDR      r1,|L3.412|
00014c  8008              STRH     r0,[r1,#0]
                  |L3.334|
;;;409          return;
;;;410        }
;;;411    
;;;412        /* Build an ethernet header. */
;;;413        memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
;;;414      }
;;;415      memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
;;;416    
;;;417      IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
;;;418    
;;;419      uip_len += sizeof(struct uip_eth_hdr);
;;;420    }
00014e  bd10              POP      {r4,pc}
                  |L3.336|
000150  2206              MOVS     r2,#6                 ;413
000152  1d21              ADDS     r1,r4,#4              ;413
000154  4808              LDR      r0,|L3.376|
000156  f7fffffe          BL       __aeabi_memcpy
                  |L3.346|
00015a  2206              MOVS     r2,#6                 ;415
00015c  490d              LDR      r1,|L3.404|
00015e  4806              LDR      r0,|L3.376|
000160  1d80              ADDS     r0,r0,#6              ;415
000162  f7fffffe          BL       __aeabi_memcpy
000166  2008              MOVS     r0,#8                 ;417
000168  4903              LDR      r1,|L3.376|
00016a  8188              STRH     r0,[r1,#0xc]          ;417
00016c  480b              LDR      r0,|L3.412|
00016e  8800              LDRH     r0,[r0,#0]            ;419  ; uip_len
000170  300e              ADDS     r0,r0,#0xe            ;419
000172  490a              LDR      r1,|L3.412|
000174  8008              STRH     r0,[r1,#0]            ;419
000176  e7ea              B        |L3.334|
;;;421    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L3.376|
                          DCD      uip_buf
                  |L3.380|
                          DCD      ||.constdata||+0x6
                  |L3.384|
                          DCD      uip_netmask
                  |L3.388|
                          DCD      uip_hostaddr
                  |L3.392|
                          DCD      uip_draddr
                  |L3.396|
                          DCD      ||.data||
                  |L3.400|
                          DCD      ||.bss||
                  |L3.404|
                          DCD      uip_ethaddr
                  |L3.408|
                          DCD      uip_appdata
                  |L3.412|
                          DCD      uip_len

                          AREA ||i.uip_arp_timer||, CODE, READONLY, ALIGN=2

                  uip_arp_timer PROC
;;;141    void
;;;142    uip_arp_timer(void)
000000  4915              LDR      r1,|L4.88|
;;;143    {
;;;144      struct arp_entry *tabptr;
;;;145    
;;;146      ++arptime;
000002  7809              LDRB     r1,[r1,#0]  ; arptime
000004  1c49              ADDS     r1,r1,#1
000006  4a14              LDR      r2,|L4.88|
000008  7011              STRB     r1,[r2,#0]
;;;147      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
00000a  2100              MOVS     r1,#0
00000c  1e92              SUBS     r2,r2,#2
00000e  7011              STRB     r1,[r2,#0]
000010  e01b              B        |L4.74|
                  |L4.18|
;;;148        tabptr = &arp_table[i];
000012  4911              LDR      r1,|L4.88|
000014  1e89              SUBS     r1,r1,#2
000016  7809              LDRB     r1,[r1,#0]  ; i
000018  eb010141          ADD      r1,r1,r1,LSL #1
00001c  4a0f              LDR      r2,|L4.92|
00001e  eb020081          ADD      r0,r2,r1,LSL #2
;;;149        if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
000022  8801              LDRH     r1,[r0,#0]
000024  8842              LDRH     r2,[r0,#2]
000026  4311              ORRS     r1,r1,r2
000028  d008              BEQ      |L4.60|
;;;150           arptime - tabptr->time >= UIP_ARP_MAXAGE) {
00002a  7a81              LDRB     r1,[r0,#0xa]
00002c  4a0a              LDR      r2,|L4.88|
00002e  7812              LDRB     r2,[r2,#0]  ; arptime
000030  1a51              SUBS     r1,r2,r1
000032  2978              CMP      r1,#0x78
000034  db02              BLT      |L4.60|
;;;151          memset(tabptr->ipaddr, 0, 4);
000036  2100              MOVS     r1,#0
000038  8001              STRH     r1,[r0,#0]
00003a  8041              STRH     r1,[r0,#2]
                  |L4.60|
00003c  4906              LDR      r1,|L4.88|
00003e  1e89              SUBS     r1,r1,#2              ;147
000040  7809              LDRB     r1,[r1,#0]            ;147  ; i
000042  1c49              ADDS     r1,r1,#1              ;147
000044  4a04              LDR      r2,|L4.88|
000046  1e92              SUBS     r2,r2,#2              ;147
000048  7011              STRB     r1,[r2,#0]            ;147
                  |L4.74|
00004a  4903              LDR      r1,|L4.88|
00004c  1e89              SUBS     r1,r1,#2              ;147
00004e  7809              LDRB     r1,[r1,#0]            ;147  ; i
000050  2908              CMP      r1,#8                 ;147
000052  dbde              BLT      |L4.18|
;;;152        }
;;;153      }
;;;154    
;;;155    }
000054  4770              BX       lr
;;;156    /*-----------------------------------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      ||.data||+0x6
                  |L4.92|
                          DCD      ||.bss||

                          AREA ||i.uip_arp_update||, CODE, READONLY, ALIGN=2

                  uip_arp_update PROC
;;;157    static void
;;;158    uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;160      register struct arp_entry *tabptr;
;;;161      /* Walk through the ARP mapping table and try to find an entry to
;;;162         update. If none is found, the IP -> MAC address mapping is
;;;163         inserted in the ARP table. */
;;;164      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000006  2000              MOVS     r0,#0
000008  4947              LDR      r1,|L5.296|
00000a  7008              STRB     r0,[r1,#0]
00000c  e021              B        |L5.82|
                  |L5.14|
;;;165    
;;;166        tabptr = &arp_table[i];
00000e  4846              LDR      r0,|L5.296|
000010  7800              LDRB     r0,[r0,#0]  ; i
000012  eb000040          ADD      r0,r0,r0,LSL #1
000016  4945              LDR      r1,|L5.300|
000018  eb010580          ADD      r5,r1,r0,LSL #2
;;;167        /* Only check those entries that are actually in use. */
;;;168        if(tabptr->ipaddr[0] != 0 &&
00001c  8828              LDRH     r0,[r5,#0]
00001e  b198              CBZ      r0,|L5.72|
;;;169           tabptr->ipaddr[1] != 0) {
000020  8868              LDRH     r0,[r5,#2]
000022  b188              CBZ      r0,|L5.72|
;;;170    
;;;171          /* Check if the source IP address of the incoming packet matches
;;;172             the IP address in this ARP table entry. */
;;;173          if(ipaddr[0] == tabptr->ipaddr[0] &&
000024  8820              LDRH     r0,[r4,#0]
000026  8829              LDRH     r1,[r5,#0]
000028  4288              CMP      r0,r1
00002a  d10d              BNE      |L5.72|
;;;174    	 ipaddr[1] == tabptr->ipaddr[1]) {
00002c  8860              LDRH     r0,[r4,#2]
00002e  8869              LDRH     r1,[r5,#2]
000030  4288              CMP      r0,r1
000032  d109              BNE      |L5.72|
;;;175    
;;;176    	/* An old entry found, update this and return. */
;;;177    	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
000034  2206              MOVS     r2,#6
000036  4631              MOV      r1,r6
000038  1d28              ADDS     r0,r5,#4
00003a  f7fffffe          BL       __aeabi_memcpy
;;;178    	tabptr->time = arptime;
00003e  483a              LDR      r0,|L5.296|
000040  1c80              ADDS     r0,r0,#2
000042  7800              LDRB     r0,[r0,#0]  ; arptime
000044  72a8              STRB     r0,[r5,#0xa]
                  |L5.70|
;;;179    
;;;180    	return;
;;;181          }
;;;182        }
;;;183      }
;;;184    
;;;185      /* If we get here, no existing ARP table entry was found, so we
;;;186         create one. */
;;;187    
;;;188      /* First, we try to find an unused entry in the ARP table. */
;;;189      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;190        tabptr = &arp_table[i];
;;;191        if(tabptr->ipaddr[0] == 0 &&
;;;192           tabptr->ipaddr[1] == 0) {
;;;193          break;
;;;194        }
;;;195      }
;;;196    
;;;197      /* If no unused entry is found, we try to find the oldest entry and
;;;198         throw it away. */
;;;199      if(i == UIP_ARPTAB_SIZE) {
;;;200        tmpage = 0;
;;;201        c = 0;
;;;202        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;203          tabptr = &arp_table[i];
;;;204          if(arptime - tabptr->time > tmpage) {
;;;205    	tmpage = arptime - tabptr->time;
;;;206    	c = i;
;;;207          }
;;;208        }
;;;209        i = c;
;;;210        tabptr = &arp_table[i];
;;;211      }
;;;212    
;;;213      /* Now, i is the ARP table entry which we will fill with the new
;;;214         information. */
;;;215      memcpy(tabptr->ipaddr, ipaddr, 4);
;;;216      memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
;;;217      tabptr->time = arptime;
;;;218    }
000046  bd70              POP      {r4-r6,pc}
                  |L5.72|
000048  4837              LDR      r0,|L5.296|
00004a  7800              LDRB     r0,[r0,#0]            ;164  ; i
00004c  1c40              ADDS     r0,r0,#1              ;164
00004e  4936              LDR      r1,|L5.296|
000050  7008              STRB     r0,[r1,#0]            ;164
                  |L5.82|
000052  4835              LDR      r0,|L5.296|
000054  7800              LDRB     r0,[r0,#0]            ;164  ; i
000056  2808              CMP      r0,#8                 ;164
000058  dbd9              BLT      |L5.14|
00005a  2000              MOVS     r0,#0                 ;189
00005c  4932              LDR      r1,|L5.296|
00005e  7008              STRB     r0,[r1,#0]            ;189
000060  e010              B        |L5.132|
                  |L5.98|
000062  4831              LDR      r0,|L5.296|
000064  7800              LDRB     r0,[r0,#0]            ;190  ; i
000066  eb000040          ADD      r0,r0,r0,LSL #1       ;190
00006a  4930              LDR      r1,|L5.300|
00006c  eb010580          ADD      r5,r1,r0,LSL #2       ;190
000070  8828              LDRH     r0,[r5,#0]            ;191
000072  b910              CBNZ     r0,|L5.122|
000074  8868              LDRH     r0,[r5,#2]            ;192
000076  b900              CBNZ     r0,|L5.122|
000078  e008              B        |L5.140|
                  |L5.122|
00007a  482b              LDR      r0,|L5.296|
00007c  7800              LDRB     r0,[r0,#0]            ;189  ; i
00007e  1c40              ADDS     r0,r0,#1              ;189
000080  4929              LDR      r1,|L5.296|
000082  7008              STRB     r0,[r1,#0]            ;189
                  |L5.132|
000084  4828              LDR      r0,|L5.296|
000086  7800              LDRB     r0,[r0,#0]            ;189  ; i
000088  2808              CMP      r0,#8                 ;189
00008a  dbea              BLT      |L5.98|
                  |L5.140|
00008c  bf00              NOP                            ;193
00008e  4826              LDR      r0,|L5.296|
000090  7800              LDRB     r0,[r0,#0]            ;199  ; i
000092  2808              CMP      r0,#8                 ;199
000094  d13a              BNE      |L5.268|
000096  2000              MOVS     r0,#0                 ;200
000098  4923              LDR      r1,|L5.296|
00009a  1cc9              ADDS     r1,r1,#3              ;200
00009c  7008              STRB     r0,[r1,#0]            ;200
00009e  1e89              SUBS     r1,r1,#2              ;201
0000a0  7008              STRB     r0,[r1,#0]            ;201
0000a2  1e49              SUBS     r1,r1,#1              ;202
0000a4  7008              STRB     r0,[r1,#0]            ;202
0000a6  e021              B        |L5.236|
                  |L5.168|
0000a8  481f              LDR      r0,|L5.296|
0000aa  7800              LDRB     r0,[r0,#0]            ;203  ; i
0000ac  eb000040          ADD      r0,r0,r0,LSL #1       ;203
0000b0  491e              LDR      r1,|L5.300|
0000b2  eb010580          ADD      r5,r1,r0,LSL #2       ;203
0000b6  7aa8              LDRB     r0,[r5,#0xa]          ;204
0000b8  491b              LDR      r1,|L5.296|
0000ba  1c89              ADDS     r1,r1,#2              ;204
0000bc  7809              LDRB     r1,[r1,#0]            ;204  ; arptime
0000be  1a08              SUBS     r0,r1,r0              ;204
0000c0  4919              LDR      r1,|L5.296|
0000c2  1cc9              ADDS     r1,r1,#3              ;204
0000c4  7809              LDRB     r1,[r1,#0]            ;204  ; tmpage
0000c6  4288              CMP      r0,r1                 ;204
0000c8  dd0b              BLE      |L5.226|
0000ca  7aa8              LDRB     r0,[r5,#0xa]          ;205
0000cc  4916              LDR      r1,|L5.296|
0000ce  1c89              ADDS     r1,r1,#2              ;205
0000d0  7809              LDRB     r1,[r1,#0]            ;205  ; arptime
0000d2  1a08              SUBS     r0,r1,r0              ;205
0000d4  4914              LDR      r1,|L5.296|
0000d6  1cc9              ADDS     r1,r1,#3              ;205
0000d8  7008              STRB     r0,[r1,#0]            ;205
0000da  1ec8              SUBS     r0,r1,#3              ;206
0000dc  7800              LDRB     r0,[r0,#0]            ;206  ; i
0000de  1e89              SUBS     r1,r1,#2              ;206
0000e0  7008              STRB     r0,[r1,#0]            ;206
                  |L5.226|
0000e2  4811              LDR      r0,|L5.296|
0000e4  7800              LDRB     r0,[r0,#0]            ;202  ; i
0000e6  1c40              ADDS     r0,r0,#1              ;202
0000e8  490f              LDR      r1,|L5.296|
0000ea  7008              STRB     r0,[r1,#0]            ;202
                  |L5.236|
0000ec  480e              LDR      r0,|L5.296|
0000ee  7800              LDRB     r0,[r0,#0]            ;202  ; i
0000f0  2808              CMP      r0,#8                 ;202
0000f2  dbd9              BLT      |L5.168|
0000f4  480c              LDR      r0,|L5.296|
0000f6  1c40              ADDS     r0,r0,#1              ;209
0000f8  7800              LDRB     r0,[r0,#0]            ;209  ; c
0000fa  490b              LDR      r1,|L5.296|
0000fc  7008              STRB     r0,[r1,#0]            ;209
0000fe  4608              MOV      r0,r1                 ;210
000100  7800              LDRB     r0,[r0,#0]            ;210  ; i
000102  eb000040          ADD      r0,r0,r0,LSL #1       ;210
000106  4909              LDR      r1,|L5.300|
000108  eb010580          ADD      r5,r1,r0,LSL #2       ;210
                  |L5.268|
00010c  8820              LDRH     r0,[r4,#0]            ;215
00010e  8028              STRH     r0,[r5,#0]            ;215
000110  8860              LDRH     r0,[r4,#2]            ;215
000112  8068              STRH     r0,[r5,#2]            ;215
000114  2206              MOVS     r2,#6                 ;216
000116  4631              MOV      r1,r6                 ;216
000118  1d28              ADDS     r0,r5,#4              ;216
00011a  f7fffffe          BL       __aeabi_memcpy
00011e  4802              LDR      r0,|L5.296|
000120  1c80              ADDS     r0,r0,#2              ;217
000122  7800              LDRB     r0,[r0,#0]            ;217  ; arptime
000124  72a8              STRB     r0,[r5,#0xa]          ;217
000126  e78e              B        |L5.70|
;;;219    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L5.296|
                          DCD      ||.data||+0x4
                  |L5.300|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  arp_table
                          %        96

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  broadcast_ethaddr
000000  ffffffff          DCB      0xff,0xff,0xff,0xff
000004  ffff              DCB      0xff,0xff
                  broadcast_ipaddr
000006  ffff              DCW      0xffff
000008  ffff              DCW      0xffff

                          AREA ||.data||, DATA, ALIGN=1

                  ipaddr
                          DCDU     0x00000000
                  i
000004  00                DCB      0x00
                  c
000005  00                DCB      0x00
                  arptime
000006  00                DCB      0x00
                  tmpage
000007  00                DCB      0x00
