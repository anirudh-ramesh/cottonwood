; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\rfid_cmd.o --depend=.\Obj\rfid_cmd.d --device=DARMSTM --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -IC:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\rfid_cmd.crf ..\..\Source\src\RFID_Cmd.c]
                          THUMB

                          AREA ||i.SendCmd||, CODE, READONLY, ALIGN=2

                  SendCmd PROC
;;;88     
;;;89     void SendCmd(uint8_t *cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91       int i;
;;;92       for(i=0;i<sizeof(cmd);i++)
000004  2500              MOVS     r5,#0
000006  e00b              B        |L1.32|
                  |L1.8|
;;;93       {
;;;94     	USART_SendData(USART2, cmd[i]);
000008  5d61              LDRB     r1,[r4,r5]
00000a  4807              LDR      r0,|L1.40|
00000c  f7fffffe          BL       USART_SendData
;;;95     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET){}
000010  bf00              NOP      
                  |L1.18|
000012  2180              MOVS     r1,#0x80
000014  4804              LDR      r0,|L1.40|
000016  f7fffffe          BL       USART_GetFlagStatus
00001a  2800              CMP      r0,#0
00001c  d0f9              BEQ      |L1.18|
00001e  1c6d              ADDS     r5,r5,#1              ;92
                  |L1.32|
000020  2d04              CMP      r5,#4                 ;92
000022  d3f1              BCC      |L1.8|
;;;96       }
;;;97     
;;;98     
;;;99     }
000024  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x40004400

                          AREA ||i.SendCmd1||, CODE, READONLY, ALIGN=2

                  SendCmd1 PROC
;;;32     
;;;33     void SendCmd1(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     
;;;36     	USART_SendData(USART2, 0x10);
000002  2110              MOVS     r1,#0x10
000004  4811              LDR      r0,|L2.76|
000006  f7fffffe          BL       USART_SendData
;;;37     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
00000a  bf00              NOP      
                  |L2.12|
00000c  2180              MOVS     r1,#0x80
00000e  480f              LDR      r0,|L2.76|
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L2.12|
;;;38     	}
;;;39     	USART_SendData(USART2, 0x03);
000018  2103              MOVS     r1,#3
00001a  480c              LDR      r0,|L2.76|
00001c  f7fffffe          BL       USART_SendData
;;;40     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000020  bf00              NOP      
                  |L2.34|
000022  2180              MOVS     r1,#0x80
000024  4809              LDR      r0,|L2.76|
000026  f7fffffe          BL       USART_GetFlagStatus
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L2.34|
;;;41     	}
;;;42     	USART_SendData(USART2, 0x01);
00002e  2101              MOVS     r1,#1
000030  4806              LDR      r0,|L2.76|
000032  f7fffffe          BL       USART_SendData
;;;43     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000036  bf00              NOP      
                  |L2.56|
000038  2180              MOVS     r1,#0x80
00003a  4804              LDR      r0,|L2.76|
00003c  f7fffffe          BL       USART_GetFlagStatus
000040  2800              CMP      r0,#0
000042  d0f9              BEQ      |L2.56|
;;;44     	} 
;;;45     	 cmd_delay();	//waiting receive data
000044  f7fffffe          BL       cmd_delay
;;;46     }
000048  bd10              POP      {r4,pc}
;;;47     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x40004400

                          AREA ||i.SendCmd2||, CODE, READONLY, ALIGN=2

                  SendCmd2 PROC
;;;47     
;;;48     void SendCmd2(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50     	
;;;51     	USART_SendData(USART2, 0x10);
000002  2110              MOVS     r1,#0x10
000004  4811              LDR      r0,|L3.76|
000006  f7fffffe          BL       USART_SendData
;;;52     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
00000a  bf00              NOP      
                  |L3.12|
00000c  2180              MOVS     r1,#0x80
00000e  480f              LDR      r0,|L3.76|
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L3.12|
;;;53     
;;;54     	}
;;;55     	USART_SendData(USART2, 0x03);
000018  2103              MOVS     r1,#3
00001a  480c              LDR      r0,|L3.76|
00001c  f7fffffe          BL       USART_SendData
;;;56     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000020  bf00              NOP      
                  |L3.34|
000022  2180              MOVS     r1,#0x80
000024  4809              LDR      r0,|L3.76|
000026  f7fffffe          BL       USART_GetFlagStatus
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L3.34|
;;;57     
;;;58     	}
;;;59     	USART_SendData(USART2, 0x00);
00002e  2100              MOVS     r1,#0
000030  4806              LDR      r0,|L3.76|
000032  f7fffffe          BL       USART_SendData
;;;60     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000036  bf00              NOP      
                  |L3.56|
000038  2180              MOVS     r1,#0x80
00003a  4804              LDR      r0,|L3.76|
00003c  f7fffffe          BL       USART_GetFlagStatus
000040  2800              CMP      r0,#0
000042  d0f9              BEQ      |L3.56|
;;;61     	}	
;;;62     	cmd_delay(); //waiting receive data
000044  f7fffffe          BL       cmd_delay
;;;63     
;;;64     }
000048  bd10              POP      {r4,pc}
;;;65     
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40004400

                          AREA ||i.SendCmd3||, CODE, READONLY, ALIGN=2

                  SendCmd3 PROC
;;;65     
;;;66     void SendCmd3(void)
000000  b510              PUSH     {r4,lr}
;;;67     {
;;;68     	
;;;69     	USART_SendData(USART2, 0x43);
000002  2143              MOVS     r1,#0x43
000004  4816              LDR      r0,|L4.96|
000006  f7fffffe          BL       USART_SendData
;;;70     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
00000a  bf00              NOP      
                  |L4.12|
00000c  2180              MOVS     r1,#0x80
00000e  4814              LDR      r0,|L4.96|
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L4.12|
;;;71     
;;;72     	}
;;;73     	USART_SendData(USART2, 0x04);
000018  2104              MOVS     r1,#4
00001a  4811              LDR      r0,|L4.96|
00001c  f7fffffe          BL       USART_SendData
;;;74     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000020  bf00              NOP      
                  |L4.34|
000022  2180              MOVS     r1,#0x80
000024  480e              LDR      r0,|L4.96|
000026  f7fffffe          BL       USART_GetFlagStatus
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L4.34|
;;;75     
;;;76     	}
;;;77     	USART_SendData(USART2, 0x01);
00002e  2101              MOVS     r1,#1
000030  480b              LDR      r0,|L4.96|
000032  f7fffffe          BL       USART_SendData
;;;78     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
000036  bf00              NOP      
                  |L4.56|
000038  2180              MOVS     r1,#0x80
00003a  4809              LDR      r0,|L4.96|
00003c  f7fffffe          BL       USART_GetFlagStatus
000040  2800              CMP      r0,#0
000042  d0f9              BEQ      |L4.56|
;;;79     	}
;;;80     	USART_SendData(USART2, 0xcd);
000044  21cd              MOVS     r1,#0xcd
000046  4806              LDR      r0,|L4.96|
000048  f7fffffe          BL       USART_SendData
;;;81     	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET) {/* Wait until a byte is to send*/
00004c  bf00              NOP      
                  |L4.78|
00004e  2180              MOVS     r1,#0x80
000050  4803              LDR      r0,|L4.96|
000052  f7fffffe          BL       USART_GetFlagStatus
000056  2800              CMP      r0,#0
000058  d0f9              BEQ      |L4.78|
;;;82     	}  
;;;83     	cmd_delay();	//waiting receive data
00005a  f7fffffe          BL       cmd_delay
;;;84     }
00005e  bd10              POP      {r4,pc}
;;;85     
                          ENDP

                  |L4.96|
                          DCD      0x40004400

                          AREA ||i.cmd_delay||, CODE, READONLY, ALIGN=1

                  cmd_delay PROC
;;;24     
;;;25     void cmd_delay(void)
000000  b500              PUSH     {lr}
;;;26     {
;;;27     	unsigned int count_s;
;;;28     	for (count_s = 200; count_s > 0; count_s--)
000002  22c8              MOVS     r2,#0xc8
000004  e002              B        |L5.12|
                  |L5.6|
;;;29     	delay_();
000006  f7fffffe          BL       delay_
00000a  1e52              SUBS     r2,r2,#1              ;28
                  |L5.12|
00000c  2a00              CMP      r2,#0                 ;28
00000e  d1fa              BNE      |L5.6|
;;;30     }
000010  bd00              POP      {pc}
;;;31     
                          ENDP


                          AREA ||i.delay_||, CODE, READONLY, ALIGN=1

                  delay_ PROC
;;;18     
;;;19     void delay_(void)
000000  f2427010          MOV      r0,#0x2710
;;;20     {
;;;21     	unsigned int count;
;;;22     	for (count = 10000; count > 0; count--);
000004  e000              B        |L6.8|
                  |L6.6|
000006  1e40              SUBS     r0,r0,#1
                  |L6.8|
000008  2800              CMP      r0,#0
00000a  d1fc              BNE      |L6.6|
;;;23     }
00000c  4770              BX       lr
;;;24     
                          ENDP

